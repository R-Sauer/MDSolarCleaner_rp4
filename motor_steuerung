# Autor: Erik Vinueza Orbea
# 09.05.2024

import time

try:
 import RPi.GPIO as GPIO
except ImportError:
 import SimulRPi.GPIO as GPIO
#import RPi.GPIO as GPIO

#Class Motor definieren
class Motor:
    def __init__(self, motorStepPin, motorDirPin):
        self.motorStepPin = motorStepPin        #Pin Nummer des Motors für die Steps ausgaben
        self.motorDirPin = motorDirPin          #Pin Nummer des Motors für die Richtung 0 => dir_pin=low  1 => dir_pin=high
        self.pulseDelay = 100                   #Delay zwischen Pulse in ms
        self.pulseWidth = 50                    #Dauer des Pulses in ms

        # Initialisierung der GPIO-Pins
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(motorStepPin, GPIO.OUT)
        GPIO.setup(motorDirPin, GPIO.OUT)
          
    def makeSteps(self, stepsNr, dir):
       #Setze Richtung
       GPIO.output(self.motorDirPin, dir)
       #Bewegung des Motors in die angegebene Schritte
       for _ in range (stepsNr):
          GPIO.output(self.motorStepPin, GPIO.HIGH)
          time.sleep(self.pulseWidth/1000)           #Die Funktion hat Sekunde als input
          GPIO.output(self.motorStepPin, GPIO.LOW)
          time.sleep(self.pulseWidth/1000)
    

# GPIO-Pins für die Motorsteuerung
motorY_step_pin = 18 # Step-Pin für Motor 1
motorY_dir_pin = 23 # Richtungspin für Motor 1
motorX_step_pin = 25 # Step-Pin für Motor 2
motorX_dir_pin = 8 # Richtungspin für Motor 2

#Implemetierung der Motor Klasse

motorY = Motor(motorY_step_pin,motorY_dir_pin)
motorX = Motor(motorX_step_pin,motorX_dir_pin)

# Beispielanwendung

while True:
    #Eingabe der Richtung vom Motor
    direction_Y = int(input("Geben Sie die Richtung für Y-Motor ein (0 für vorwärts, 1 für rückwärts): "))
    #direction_X = int(input("Geben Sie die Richtung für X-Motor ein (0 für vorwärts, 1 für rückwärts): ")
    
    #Eingabe Anzahl von Schritte
    stepsMotorY = int(input("Geben Sie die Schritte für Y-Motor 1 ein : "))   
    #stepsMotorX = int(input("Geben Sie die Schritte für X-Motor ein : "))
    
    #Bewegung der Motoren
    motorY.makeSteps(stepsMotorY,direction_Y)           #Hier blockiert wir der Code Blockeirt
    #motorX.makeSteps(stepsMotorX,direction_X)          #eine Lösung wäre eine bib wie accelStepper wie bei Arduino zu finden
      