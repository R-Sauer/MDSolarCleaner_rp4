# Autor: Erik Vinueza Orbea
# 21.05.2024

import time

try:
 import RPi.GPIO as GPIO
except ImportError:
 import SimulRPi.GPIO as GPIO
#import RPi.GPIO as GPIO

#Class Motor definieren
class StepMotor:
    def __init__(self, motorStepPin, motorDirPin, endStopPin1, endStopPin2):
        self.motorStepPin = motorStepPin        #Pin Nummer des Motors für die Steps ausgaben
        self.motorDirPin = motorDirPin          #Pin Nummer des Motors für die Richtung 0 => dir_pin=low  1 => dir_pin=high
        self.endStopPin1 = endStopPin1          #Pin für Endstopschalter1
        self.endStopPin2 = endStopPin2          #Pin für Endstopschalter2
        self.stepPeriod = 2500                  #Dauer eines Schrittes in us
        self.totalSteps = 0                     #Anzahl der gelaufende steps
        self.totalDistanceInCm = self.totalSteps/28         
        # Initialisierung der GPIO-Pins
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(motorStepPin, GPIO.OUT)
        GPIO.setup(motorDirPin, GPIO.OUT)
        GPIO.setup(endStopPin1, GPIO.IN)
        GPIO.setup(endStopPin2, GPIO.IN)
          
    def makeSteps(self, stepsNr, dir):
       #Setze Richtung
       GPIO.output(self.motorDirPin, dir)
       #Bewegung des Motors in die angegebene Schritte
       for _ in range (stepsNr):
          #Endstopsauswertung
          if ((GPIO.input(self.endStopPin1) != GPIO.HIGH) & (dir == 1)) | ((GPIO.input(self.endStopPin2) != GPIO.HIGH) & (dir == 0)):
             break
          GPIO.output(self.motorStepPin, GPIO.HIGH)
          time.sleep(self.stepPeriod/2000000)           #Die Funktion hat Sekunde als input
          GPIO.output(self.motorStepPin, GPIO.LOW)
          time.sleep(self.stepPeriod/2000000)            #Es gibt zwei Delays und deswegen nur halbe Periode
          #Schritte zählen
          if(dir == 0):
             self.totalSteps =+ 1
          if(dir == 1):
            self.totalSteps =- 1
    
    
    def setFrequencyInHz(self, frequency):
       self.stepPeriod = (10000)/(4*frequency)            #Frequenz in Hz und Period in us
    
    def setSpeedInMPS(self, velocity):
       self.stepPeriod = (10000)/(28*velocity)           #velocity in m/s und Peruid in us
    
    def getSteps(self):
        return self.totalSteps
    
    def getDistanceInCm(self):
       return self.totalDistanceInCm

class BrushMotor:
    def __init__(self, pwm_pin, dir_pin_1):
        self.pwm_pin = pwm_pin
        self.dir_pin_1 = dir_pin_1
        self.speed = 0
        
        # Initialisierung der GPIO-Pins
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self.pwm_pin, GPIO.OUT)
        GPIO.setup(self.dir_pin_1, GPIO.OUT)
        
        # PWM-Objekt für die Geschwindigkeitssteuerung
        self.pwm = GPIO.PWM(self.pwm_pin, 100)  # 100 Hz PWM
        self.pwm.start(0)  # Start PWM with 0% duty cycle

    def setSpeedPercent(self, value):
        # Setze Geschwindigkeit
        self.speed = value
    
    def move(self, direction):
        # Setze Richtung
        GPIO.output(self.dir_pin_1, direction)
        self.pwm.ChangeDutyCycle(self.speed)
        
    def stop(self):
      self.pwm.ChangeDutyCycle(0)